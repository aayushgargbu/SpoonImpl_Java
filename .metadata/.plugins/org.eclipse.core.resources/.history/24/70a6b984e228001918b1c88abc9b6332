import java.util.Collection;
import java.util.List;
import java.util.Set;
import spoon.Launcher;
import spoon.SpoonException;
import spoon.reflect.code.BinaryOperatorKind;
import spoon.reflect.code.CtStatement;
import spoon.reflect.declaration.CtClass;
import spoon.reflect.declaration.CtMethod;
import spoon.reflect.declaration.CtType;
import spoon.support.compiler.VirtualFile;
import spoon.support.reflect.code.CtBinaryOperatorImpl;
import spoon.support.reflect.code.CtIfImpl;

public class Start {

	public static void main(String[] args) {
		String javaCode = "class A { void m() { if(\"a\" == \"a\") {System.out.println(\"yeah\");}} }";
		Launcher launcher = new Launcher();
		launcher.addInputResource(new VirtualFile(code));
		launcher.getEnvironment().setNoClasspath(true);
		launcher.getEnvironment().setAutoImports(true);
		Collection<CtType<?>> allTypes = launcher.buildModel().getAllTypes();
		if (allTypes.size() != 1) {
			throw new SpoonException(
					"parseClass only considers one class. Please consider using a Launcher object for more advanced usage.");
		}
		try {
			return (CtClass<?>) allTypes.stream().findFirst().get();
		} catch (ClassCastException e) {
			throw new SpoonException(
					"parseClass only considers classes (and not interfaces and enums). Please consider using a Launcher object for more advanced usage.");
		}

		CtClass<?> l = Launcher.parseClass(javaCode);
		Set<CtMethod<?>> methods = l.getAllMethods();
		for (CtMethod<?> method : methods) {
			List<CtStatement> statements = method.getBody().getStatements();
			if (statements.size() > 0) {
				for (CtStatement statement : statements) {
					if (statement.getClass().getTypeName() == CtIfImpl.class.getTypeName()) {
						CtIfImpl ifImpl = (CtIfImpl) statement;
						CtBinaryOperatorImpl<?> binaryOperatorImpl = (CtBinaryOperatorImpl<?>) ifImpl.getCondition();
						BinaryOperatorKind kind = binaryOperatorImpl.getKind();
						BinaryOperatorKind reverseKind = ReverseBinaryOperatorKind(kind);
						if (kind != reverseKind) {
							binaryOperatorImpl.setKind(reverseKind);
						}
					}
				}
			}
		}
		System.out.println(l);
	}

	private static void ReverseBinOps() {
		try {

		} catch (Exception ex) {
			throw ex;
		}
	}

	private static BinaryOperatorKind ReverseBinaryOperatorKind(BinaryOperatorKind originalKind) throws Exception {
		try {
			BinaryOperatorKind reverseKind;
			switch (originalKind) {
			case EQ:
				reverseKind = BinaryOperatorKind.NE;
				break;
			case NE:
				reverseKind = BinaryOperatorKind.EQ;
				break;
			case LT:
				reverseKind = BinaryOperatorKind.GT;
				break;
			case GT:
				reverseKind = BinaryOperatorKind.LT;
				break;
			case LE:
				reverseKind = BinaryOperatorKind.GE;
				break;
			case GE:
				reverseKind = BinaryOperatorKind.LE;
				break;
			default:
				reverseKind = originalKind;
				break;
			}
			return reverseKind;
		} catch (Exception ex) {
			throw ex;
		}
	}
}
