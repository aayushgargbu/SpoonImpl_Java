import java.util.List;
import java.util.Set;
import spoon.Launcher;
import spoon.reflect.code.BinaryOperatorKind;
import spoon.reflect.code.CtStatement;
import spoon.reflect.declaration.CtClass;
import spoon.reflect.declaration.CtMethod;
import spoon.support.reflect.code.CtBinaryOperatorImpl;
import spoon.support.reflect.code.CtIfImpl;

public class Start {

	public static void main(String[] args) {
		//CtClass<?> l = Launcher.parseClass("class A { void m() { if(\"a\" == \"a\") {System.out.println(\"yeah\");}} }");
		CtClass<?> l = Launcher.parseClass("public XYDataItem addOrUpdate(Number x, Number y) {\r\n" + 
				"    if (x == null) {\r\n" + 
				"        throw new IllegalArgumentException(\"Null 'x' argument.\");\r\n" + 
				"    }\r\n" + 
				"    XYDataItem overwritten = null;\r\n" + 
				"    int index = indexOf(x);\r\n" + 
				"    if (index >= 0 && !this.allowDuplicateXValues) {\r\n" + 
				"        XYDataItem existing = (XYDataItem) this.data.get(index);\r\n" + 
				"        try {\r\n" + 
				"            overwritten = (XYDataItem) existing.clone();\r\n" + 
				"        }\r\n" + 
				"        catch (CloneNotSupportedException e) {\r\n" + 
				"            throw new SeriesException(\"Couldn't clone XYDataItem!\");\r\n" + 
				"        }\r\n" + 
				"        existing.setY(y);\r\n" + 
				"    }\r\n" + 
				"    else {\r\n" + 
				"        if (this.autoSort) {\r\n" + 
				"            this.data.add(-index - 1, new XYDataItem(x, y));\r\n" + 
				"        }\r\n" + 
				"        else {\r\n" + 
				"            this.data.add(new XYDataItem(x, y));\r\n" + 
				"        }\r\n" + 
				"        if (getItemCount() > this.maximumItemCount) {\r\n" + 
				"            this.data.remove(0);\r\n" + 
				"        }\r\n" + 
				"    }\r\n" + 
				"    fireSeriesChanged();\r\n" + 
				"    return overwritten;\r\n" + 
				"}");
		Set<CtMethod<?>> methods = l.getAllMethods();
		for(CtMethod<?> method: methods) {
			List<CtStatement> statements = method.getBody().getStatements();
			if(statements.size() > 0) {
				for(CtStatement statement: statements) {
					if(statement.getClass().getTypeName() == CtIfImpl.class.getTypeName()) {
						CtIfImpl ifImpl = (CtIfImpl) statement;
						CtBinaryOperatorImpl<?> binaryOperatorImpl =  (CtBinaryOperatorImpl<?>)ifImpl.getCondition();
						BinaryOperatorKind kind =  binaryOperatorImpl.getKind();
						BinaryOperatorKind reverseKind = ReverseBinaryOperatorKind(kind);
						if(kind != reverseKind) {
							binaryOperatorImpl.setKind(reverseKind);
						}
					}
				}
			}
		}
		System.out.println(l);
	}
	
	private static BinaryOperatorKind ReverseBinaryOperatorKind(BinaryOperatorKind originalKind){
		BinaryOperatorKind reverseKind;
		switch(originalKind) {
		case EQ:
			reverseKind = BinaryOperatorKind.NE;
			break;
		default:
			reverseKind = originalKind; break;
		}
		return reverseKind;
	}
}
